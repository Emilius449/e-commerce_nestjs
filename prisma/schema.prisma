// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
// Relation with bookmark (one to many)
model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  firstName    String
  lastName     String
  password     String
  isAdmin      Boolean  @default(false)
  refreshToken String?
  cart         Cart?
  order        Order[]

  addresses Address[] // One use can have multiple address

  @@map("users")
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique

  products Product[] // One cart can have multiple products
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String
  imageUrl    String
  price       Int
  quantity    Int
  categories  String[]
  size        String?
  color       String?

  cart   Cart? @relation(fields: [cartId], references: [id])
  cartId Int?

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  @@map("products")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  status    Status   @default(PENDING)

  products Product[] // One order can have multiple products

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int
}

model Address {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     String
  city        String
  region      String?
  addressLine String?
  postalCode  String
  phoneNumber String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  orders Order[] // One address can have multiple order
}

enum Status {
  PENDING
  COMPLETED
}
